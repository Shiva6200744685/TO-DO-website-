@page "/"
@using TaskTracker.Shared
@using System.Net.Http
@using System.Net.Http.Json
@using System.Collections.Generic
@using Microsoft.AspNetCore.Components.Web
@inject HttpClient Http

<PageTitle>Task Tracker</PageTitle>

<div class="container">
    <div class="header">
        <h1>üìã Task Tracker</h1>
        <p class="subtitle">Stay organized and productive</p>
    </div>

    <div class="add-task-card">
        <div class="input-group">
            <input @bind="newTaskTitle" placeholder="What needs to be done?" class="task-input" />
            <button @onclick="AddTask" class="btn-primary">+ Add Task</button>
        </div>
    </div>

    @if (tasks == null)
    {
        <div class="loading">
            <div class="spinner"></div>
            <p>Loading tasks...</p>
        </div>
    }
    else if (tasks.Count == 0)
    {
        <div class="empty-state">
            <div class="empty-icon">üìù</div>
            <h3>No tasks yet</h3>
            <p>Add your first task to get started!</p>
        </div>
    }
    else
    {
        <div class="task-stats">
            <span class="stat">Total: @tasks.Count</span>
            <span class="stat">Completed: @tasks.Count(t => t.IsCompleted)</span>
            <span class="stat">Remaining: @tasks.Count(t => !t.IsCompleted)</span>
        </div>

        <div class="tasks-container">
            @foreach (var task in tasks)
            {
                <div class="task-card @(task.IsCompleted ? "completed" : "")">
                    <div class="task-content">
                        <label class="checkbox-container">
                            <input type="checkbox" @bind="task.IsCompleted" @bind:after="() => UpdateTask(task)" />
                            <span class="checkmark"></span>
                        </label>
                        
                        @if (editingId == task.Id)
                        {
                            <div class="edit-mode">
                                <input @bind="editTitle" @onkeypress="@(async (e) => { if (e.Key == "Enter") await SaveEdit(task); })" class="edit-input" />
                                <div class="edit-actions">
                                    <button @onclick="() => SaveEdit(task)" class="btn-save">‚úì</button>
                                    <button @onclick="CancelEdit" class="btn-cancel">‚úï</button>
                                </div>
                            </div>
                        }
                        else
                        {
                            <span @ondblclick="() => StartEdit(task)" class="task-text">@task.Title</span>
                            <div class="task-actions">
                                <button @onclick="() => StartEdit(task)" class="btn-edit" title="Edit">‚úèÔ∏è</button>
                                <button @onclick="() => DeleteTask(task.Id)" class="btn-delete" title="Delete">üóëÔ∏è</button>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    }
</div>

<style>
    * { box-sizing: border-box; }
    
    .container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }
    
    .header {
        text-align: center;
        margin-bottom: 30px;
    }
    
    .header h1 {
        color: #2c3e50;
        margin: 0;
        font-size: 2.5rem;
        font-weight: 700;
    }
    
    .subtitle {
        color: #7f8c8d;
        margin: 8px 0 0 0;
        font-size: 1.1rem;
    }
    
    .add-task-card {
        background: white;
        border-radius: 12px;
        padding: 24px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        margin-bottom: 30px;
    }
    
    .input-group {
        display: flex;
        gap: 12px;
    }
    
    .task-input {
        flex: 1;
        padding: 14px 16px;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        font-size: 16px;
        transition: border-color 0.2s;
    }
    
    .task-input:focus {
        outline: none;
        border-color: #3498db;
    }
    
    .btn-primary {
        background: #3498db;
        color: white;
        border: none;
        padding: 14px 24px;
        border-radius: 8px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: background 0.2s;
    }
    
    .btn-primary:hover {
        background: #2980b9;
    }
    
    .loading {
        text-align: center;
        padding: 40px;
    }
    
    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #f3f3f3;
        border-top: 4px solid #3498db;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto 16px;
    }
    
    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    .empty-state {
        text-align: center;
        padding: 60px 20px;
        color: #7f8c8d;
    }
    
    .empty-icon {
        font-size: 4rem;
        margin-bottom: 16px;
    }
    
    .task-stats {
        display: flex;
        gap: 20px;
        margin-bottom: 20px;
        justify-content: center;
    }
    
    .stat {
        background: #f8f9fa;
        padding: 8px 16px;
        border-radius: 20px;
        font-size: 14px;
        font-weight: 500;
        color: #495057;
    }
    
    .tasks-container {
        display: flex;
        flex-direction: column;
        gap: 12px;
    }
    
    .task-card {
        background: white;
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        transition: all 0.2s;
        border-left: 4px solid #3498db;
    }
    
    .task-card:hover {
        box-shadow: 0 4px 16px rgba(0,0,0,0.12);
        transform: translateY(-1px);
    }
    
    .task-card.completed {
        border-left-color: #27ae60;
        background: #f8fff9;
    }
    
    .task-content {
        display: flex;
        align-items: center;
        gap: 16px;
    }
    
    .checkbox-container {
        position: relative;
        cursor: pointer;
    }
    
    .checkbox-container input {
        opacity: 0;
        position: absolute;
    }
    
    .checkmark {
        width: 20px;
        height: 20px;
        border: 2px solid #bdc3c7;
        border-radius: 4px;
        display: inline-block;
        position: relative;
        transition: all 0.2s;
    }
    
    .checkbox-container input:checked + .checkmark {
        background: #27ae60;
        border-color: #27ae60;
    }
    
    .checkbox-container input:checked + .checkmark:after {
        content: '‚úì';
        position: absolute;
        color: white;
        font-size: 14px;
        top: -2px;
        left: 3px;
    }
    
    .task-text {
        flex: 1;
        font-size: 16px;
        cursor: pointer;
        padding: 4px;
        border-radius: 4px;
        transition: background 0.2s;
    }
    
    .task-text:hover {
        background: #f8f9fa;
    }
    
    .completed .task-text {
        text-decoration: line-through;
        color: #7f8c8d;
    }
    
    .task-actions {
        display: flex;
        gap: 8px;
    }
    
    .btn-edit, .btn-delete, .btn-save, .btn-cancel {
        background: none;
        border: none;
        padding: 8px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 16px;
        transition: background 0.2s;
    }
    
    .btn-edit:hover {
        background: #e3f2fd;
    }
    
    .btn-delete:hover {
        background: #ffebee;
    }
    
    .btn-save {
        background: #27ae60;
        color: white;
    }
    
    .btn-save:hover {
        background: #219a52;
    }
    
    .btn-cancel {
        background: #e74c3c;
        color: white;
    }
    
    .btn-cancel:hover {
        background: #c0392b;
    }
    
    .edit-mode {
        display: flex;
        align-items: center;
        gap: 12px;
        flex: 1;
    }
    
    .edit-input {
        flex: 1;
        padding: 8px 12px;
        border: 2px solid #3498db;
        border-radius: 6px;
        font-size: 16px;
    }
    
    .edit-input:focus {
        outline: none;
        border-color: #2980b9;
    }
    
    .edit-actions {
        display: flex;
        gap: 4px;
    }
    
    @@media (max-width: 600px) {
        .container {
            padding: 16px;
        }
        
        .input-group {
            flex-direction: column;
        }
        
        .task-stats {
            flex-direction: column;
            align-items: center;
        }
    }
</style>

@code {
    private List<TaskItem> tasks;
    private string newTaskTitle = "";
    private int editingId = 0;
    private string editTitle = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadTasks();
    }

    private async Task LoadTasks()
    {
        try
        {
            tasks = await Http.GetFromJsonAsync<List<TaskItem>>("api/tasks") ?? new List<TaskItem>();
        }
        catch
        {
            tasks = new List<TaskItem>();
        }
    }

    private async Task AddTask()
    {
        if (string.IsNullOrWhiteSpace(newTaskTitle)) return;
        
        var task = new TaskItem { Title = newTaskTitle.Trim() };
        await Http.PostAsJsonAsync("api/tasks", task);
        newTaskTitle = "";
        await LoadTasks();
    }

    private async Task UpdateTask(TaskItem task)
    {
        await Http.PutAsJsonAsync($"api/tasks/{task.Id}", task);
    }

    private async Task DeleteTask(int id)
    {
        await Http.DeleteAsync($"api/tasks/{id}");
        await LoadTasks();
    }

    private void StartEdit(TaskItem task)
    {
        editingId = task.Id;
        editTitle = task.Title;
    }

    private async Task SaveEdit(TaskItem task)
    {
        if (string.IsNullOrWhiteSpace(editTitle)) return;
        
        task.Title = editTitle.Trim();
        await UpdateTask(task);
        CancelEdit();
        await LoadTasks();
    }

    private void CancelEdit()
    {
        editingId = 0;
        editTitle = "";
    }
}